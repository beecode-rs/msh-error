import { errorHOF } from '#src/error/hof';
import { HttpResponseCodeMapper } from '#src/http-response-code';
/* eslint-disable sort-keys-fix/sort-keys-fix */
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export const errorFactory = () => ({
    client: {
        badRequest: errorHOF(HttpResponseCodeMapper.BAD_REQUEST),
        unauthorized: errorHOF(HttpResponseCodeMapper.UNAUTHORIZED),
        paymentRequired: errorHOF(HttpResponseCodeMapper.PAYMENT_REQUIRED),
        forbidden: errorHOF(HttpResponseCodeMapper.FORBIDDEN),
        notFound: errorHOF(HttpResponseCodeMapper.NOT_FOUND),
        methodNotAllowed: errorHOF(HttpResponseCodeMapper.METHOD_NOT_ALLOWED),
        notAcceptable: errorHOF(HttpResponseCodeMapper.NOT_ACCEPTABLE),
        proxyAuthenticationRequired: errorHOF(HttpResponseCodeMapper.PROXY_AUTHENTICATION_REQUIRED),
        requestTimeout: errorHOF(HttpResponseCodeMapper.REQUEST_TIMEOUT),
        conflict: errorHOF(HttpResponseCodeMapper.CONFLICT),
        gone: errorHOF(HttpResponseCodeMapper.GONE),
        lengthRequired: errorHOF(HttpResponseCodeMapper.LENGTH_REQUIRED),
        preconditionFailed: errorHOF(HttpResponseCodeMapper.PRECONDITION_FAILED),
        payloadTooLarge: errorHOF(HttpResponseCodeMapper.PAYLOAD_TOO_LARGE),
        requestUriTooLong: errorHOF(HttpResponseCodeMapper.REQUEST__URI_TOO_LONG),
        unsupportedMediaType: errorHOF(HttpResponseCodeMapper.UNSUPPORTED_MEDIA_TYPE),
        requestedRangeNotSatisfiable: errorHOF(HttpResponseCodeMapper.REQUESTED_RANGE_NOT_SATISFIABLE),
        expectationFailed: errorHOF(HttpResponseCodeMapper.EXPECTATION_FAILED),
        misdirectedRequest: errorHOF(HttpResponseCodeMapper.MISDIRECTED_REQUEST),
        unprocessableEntity: errorHOF(HttpResponseCodeMapper.UNPROCESSABLE_ENTITY),
        locked: errorHOF(HttpResponseCodeMapper.LOCKED),
        failedDependency: errorHOF(HttpResponseCodeMapper.FAILED_DEPENDENCY),
        upgradeRequired: errorHOF(HttpResponseCodeMapper.UPGRADE_REQUIRED),
        preconditionRequired: errorHOF(HttpResponseCodeMapper.PRECONDITION_REQUIRED),
        tooManyRequests: errorHOF(HttpResponseCodeMapper.TOO_MANY_REQUESTS),
        requestHeaderFieldsTooLarge: errorHOF(HttpResponseCodeMapper.REQUEST_HEADER_FIELDS_TOO_LARGE),
        connectionClosedWithoutResponse: errorHOF(HttpResponseCodeMapper.CONNECTION_CLOSED_WITHOUT_RESPONSE),
        unavailableForLegalReasons: errorHOF(HttpResponseCodeMapper.UNAVAILABLE_FOR_LEGAL_REASONS),
        clientClosedRequest: errorHOF(HttpResponseCodeMapper.CLIENT_CLOSED_REQUEST),
    },
    server: {
        internalServerError: errorHOF(HttpResponseCodeMapper.INTERNAL_SERVER_ERROR),
        notImplemented: errorHOF(HttpResponseCodeMapper.NOT_IMPLEMENTED),
        badGateway: errorHOF(HttpResponseCodeMapper.BAD_GATEWAY),
        serviceUnavailable: errorHOF(HttpResponseCodeMapper.SERVICE_UNAVAILABLE),
        gatewayTimeout: errorHOF(HttpResponseCodeMapper.GATEWAY_TIMEOUT),
        httpVersionNotSupported: errorHOF(HttpResponseCodeMapper.HTTP_VERSION_NOT_SUPPORTED),
        variantAlsoNegotiates: errorHOF(HttpResponseCodeMapper.VARIANT_ALSO_NEGOTIATES),
        insufficientStorage: errorHOF(HttpResponseCodeMapper.INSUFFICIENT_STORAGE),
        loopDetected: errorHOF(HttpResponseCodeMapper.LOOP_DETECTED),
        notExtended: errorHOF(HttpResponseCodeMapper.NOT_EXTENDED),
        networkAuthenticationRequired: errorHOF(HttpResponseCodeMapper.NETWORK_AUTHENTICATION_REQUIRED),
        networkConnectTimeoutError: errorHOF(HttpResponseCodeMapper.NETWORK_CONNECT_TIMEOUT_ERROR),
    },
});
/* eslint-enable sort-keys-fix/sort-keys-fix */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvci9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUVoRSxnREFBZ0Q7QUFDaEQsNEVBQTRFO0FBQzVFLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sRUFBRTtRQUNQLFVBQVUsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDO1FBQ3hELFlBQVksRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDO1FBQzNELGVBQWUsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLENBQUM7UUFDbEUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7UUFDckQsUUFBUSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUM7UUFDcEQsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDO1FBQ3JFLGFBQWEsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDO1FBQzlELDJCQUEyQixFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyw2QkFBNkIsQ0FBQztRQUMzRixjQUFjLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQztRQUNoRSxRQUFRLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQztRQUNuRCxJQUFJLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQztRQUMzQyxjQUFjLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLGVBQWUsQ0FBQztRQUNoRSxrQkFBa0IsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsbUJBQW1CLENBQUM7UUFDeEUsZUFBZSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUNuRSxpQkFBaUIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUM7UUFDekUsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLHNCQUFzQixDQUFDO1FBQzdFLDRCQUE0QixFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQywrQkFBK0IsQ0FBQztRQUM5RixpQkFBaUIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUM7UUFDdEUsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDO1FBQ3hFLG1CQUFtQixFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FBQztRQUMxRSxNQUFNLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQztRQUMvQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUM7UUFDcEUsZUFBZSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNsRSxvQkFBb0IsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUM7UUFDNUUsZUFBZSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQztRQUNuRSwyQkFBMkIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsK0JBQStCLENBQUM7UUFDN0YsK0JBQStCLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLGtDQUFrQyxDQUFDO1FBQ3BHLDBCQUEwQixFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyw2QkFBNkIsQ0FBQztRQUMxRixtQkFBbUIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUM7S0FDM0U7SUFDRCxNQUFNLEVBQUU7UUFDUCxtQkFBbUIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMscUJBQXFCLENBQUM7UUFDM0UsY0FBYyxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxlQUFlLENBQUM7UUFDaEUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLENBQUM7UUFDeEQsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDO1FBQ3hFLGNBQWMsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsZUFBZSxDQUFDO1FBQ2hFLHVCQUF1QixFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQywwQkFBMEIsQ0FBQztRQUNwRixxQkFBcUIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsdUJBQXVCLENBQUM7UUFDL0UsbUJBQW1CLEVBQUUsUUFBUSxDQUFDLHNCQUFzQixDQUFDLG9CQUFvQixDQUFDO1FBQzFFLFlBQVksRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsYUFBYSxDQUFDO1FBQzVELFdBQVcsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDO1FBQzFELDZCQUE2QixFQUFFLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQywrQkFBK0IsQ0FBQztRQUMvRiwwQkFBMEIsRUFBRSxRQUFRLENBQUMsc0JBQXNCLENBQUMsNkJBQTZCLENBQUM7S0FDMUY7Q0FDRCxDQUFDLENBQUE7QUFDRiwrQ0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvckhPRiB9IGZyb20gJyNzcmMvZXJyb3IvaG9mJ1xuaW1wb3J0IHsgSHR0cFJlc3BvbnNlQ29kZU1hcHBlciB9IGZyb20gJyNzcmMvaHR0cC1yZXNwb25zZS1jb2RlJ1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBzb3J0LWtleXMtZml4L3NvcnQta2V5cy1maXggKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtZnVuY3Rpb24tcmV0dXJuLXR5cGVcbmV4cG9ydCBjb25zdCBlcnJvckZhY3RvcnkgPSAoKSA9PiAoe1xuXHRjbGllbnQ6IHtcblx0XHRiYWRSZXF1ZXN0OiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkJBRF9SRVFVRVNUKSxcblx0XHR1bmF1dGhvcml6ZWQ6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuVU5BVVRIT1JJWkVEKSxcblx0XHRwYXltZW50UmVxdWlyZWQ6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuUEFZTUVOVF9SRVFVSVJFRCksXG5cdFx0Zm9yYmlkZGVuOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkZPUkJJRERFTiksXG5cdFx0bm90Rm91bmQ6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuTk9UX0ZPVU5EKSxcblx0XHRtZXRob2ROb3RBbGxvd2VkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLk1FVEhPRF9OT1RfQUxMT1dFRCksXG5cdFx0bm90QWNjZXB0YWJsZTogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5OT1RfQUNDRVBUQUJMRSksXG5cdFx0cHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLlBST1hZX0FVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEKSxcblx0XHRyZXF1ZXN0VGltZW91dDogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5SRVFVRVNUX1RJTUVPVVQpLFxuXHRcdGNvbmZsaWN0OiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkNPTkZMSUNUKSxcblx0XHRnb25lOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkdPTkUpLFxuXHRcdGxlbmd0aFJlcXVpcmVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkxFTkdUSF9SRVFVSVJFRCksXG5cdFx0cHJlY29uZGl0aW9uRmFpbGVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLlBSRUNPTkRJVElPTl9GQUlMRUQpLFxuXHRcdHBheWxvYWRUb29MYXJnZTogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5QQVlMT0FEX1RPT19MQVJHRSksXG5cdFx0cmVxdWVzdFVyaVRvb0xvbmc6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuUkVRVUVTVF9fVVJJX1RPT19MT05HKSxcblx0XHR1bnN1cHBvcnRlZE1lZGlhVHlwZTogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5VTlNVUFBPUlRFRF9NRURJQV9UWVBFKSxcblx0XHRyZXF1ZXN0ZWRSYW5nZU5vdFNhdGlzZmlhYmxlOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLlJFUVVFU1RFRF9SQU5HRV9OT1RfU0FUSVNGSUFCTEUpLFxuXHRcdGV4cGVjdGF0aW9uRmFpbGVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkVYUEVDVEFUSU9OX0ZBSUxFRCksXG5cdFx0bWlzZGlyZWN0ZWRSZXF1ZXN0OiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLk1JU0RJUkVDVEVEX1JFUVVFU1QpLFxuXHRcdHVucHJvY2Vzc2FibGVFbnRpdHk6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuVU5QUk9DRVNTQUJMRV9FTlRJVFkpLFxuXHRcdGxvY2tlZDogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5MT0NLRUQpLFxuXHRcdGZhaWxlZERlcGVuZGVuY3k6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuRkFJTEVEX0RFUEVOREVOQ1kpLFxuXHRcdHVwZ3JhZGVSZXF1aXJlZDogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5VUEdSQURFX1JFUVVJUkVEKSxcblx0XHRwcmVjb25kaXRpb25SZXF1aXJlZDogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5QUkVDT05ESVRJT05fUkVRVUlSRUQpLFxuXHRcdHRvb01hbnlSZXF1ZXN0czogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5UT09fTUFOWV9SRVFVRVNUUyksXG5cdFx0cmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLlJFUVVFU1RfSEVBREVSX0ZJRUxEU19UT09fTEFSR0UpLFxuXHRcdGNvbm5lY3Rpb25DbG9zZWRXaXRob3V0UmVzcG9uc2U6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuQ09OTkVDVElPTl9DTE9TRURfV0lUSE9VVF9SRVNQT05TRSksXG5cdFx0dW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnM6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuVU5BVkFJTEFCTEVfRk9SX0xFR0FMX1JFQVNPTlMpLFxuXHRcdGNsaWVudENsb3NlZFJlcXVlc3Q6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuQ0xJRU5UX0NMT1NFRF9SRVFVRVNUKSxcblx0fSxcblx0c2VydmVyOiB7XG5cdFx0aW50ZXJuYWxTZXJ2ZXJFcnJvcjogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5JTlRFUk5BTF9TRVJWRVJfRVJST1IpLFxuXHRcdG5vdEltcGxlbWVudGVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLk5PVF9JTVBMRU1FTlRFRCksXG5cdFx0YmFkR2F0ZXdheTogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5CQURfR0FURVdBWSksXG5cdFx0c2VydmljZVVuYXZhaWxhYmxlOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLlNFUlZJQ0VfVU5BVkFJTEFCTEUpLFxuXHRcdGdhdGV3YXlUaW1lb3V0OiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkdBVEVXQVlfVElNRU9VVCksXG5cdFx0aHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuSFRUUF9WRVJTSU9OX05PVF9TVVBQT1JURUQpLFxuXHRcdHZhcmlhbnRBbHNvTmVnb3RpYXRlczogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5WQVJJQU5UX0FMU09fTkVHT1RJQVRFUyksXG5cdFx0aW5zdWZmaWNpZW50U3RvcmFnZTogZXJyb3JIT0YoSHR0cFJlc3BvbnNlQ29kZU1hcHBlci5JTlNVRkZJQ0lFTlRfU1RPUkFHRSksXG5cdFx0bG9vcERldGVjdGVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLkxPT1BfREVURUNURUQpLFxuXHRcdG5vdEV4dGVuZGVkOiBlcnJvckhPRihIdHRwUmVzcG9uc2VDb2RlTWFwcGVyLk5PVF9FWFRFTkRFRCksXG5cdFx0bmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuTkVUV09SS19BVVRIRU5USUNBVElPTl9SRVFVSVJFRCksXG5cdFx0bmV0d29ya0Nvbm5lY3RUaW1lb3V0RXJyb3I6IGVycm9ySE9GKEh0dHBSZXNwb25zZUNvZGVNYXBwZXIuTkVUV09SS19DT05ORUNUX1RJTUVPVVRfRVJST1IpLFxuXHR9LFxufSlcbi8qIGVzbGludC1lbmFibGUgc29ydC1rZXlzLWZpeC9zb3J0LWtleXMtZml4ICovXG4iXX0=